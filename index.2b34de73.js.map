{"mappings":"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","sources":["<anon>","src/index.ts","src/config.ts"],"sourcesContent":["\nconst $9d936a2aecb96285$export$1630b5343357e8b5 = Object.freeze({\n    SLOT_MACHINE_SIZE: 3,\n    REEL_SIZE: 60,\n    REEL_OFFSET: 3,\n    ANIMATION_DELAY: 1000,\n    ANIMATION_DURATION: 2000,\n    SYMBOL_QTY: 4,\n    SPIN_BUTTON_DELAY: 800,\n    BASE_URL_DEV: \"\",\n    BASE_URL_PROD: \"https://thiagocolen.github.io/slot-machine\"\n});\n\n\n// const baseTag = document.getElementsByTagName('base')[0];\n// baseTag.setAttribute('href', location.href);\n// console.log(baseTag);\n// console.log(location);\nlet $b4e14b6b8da86996$var$BASE_URL;\nconsole.log(\"process.env.NODE_ENV\", \"production\");\n$b4e14b6b8da86996$var$BASE_URL = (0, $9d936a2aecb96285$export$1630b5343357e8b5).BASE_URL_PROD;\nclass $b4e14b6b8da86996$var$SlotMachine {\n    constructor(){\n        this.reel_animations = [];\n        this.previous_reel = [];\n        // Status\n        this.finished_reels = 0;\n        this.result = [];\n        this.snd = new Audio(\"./assets/sounds/mixkit-arcade-slot-machine-wheel-1933.wav\");\n        this.initPreviousReelObj();\n        this.createSlotMachine((0, $9d936a2aecb96285$export$1630b5343357e8b5).SLOT_MACHINE_SIZE);\n        this.createSpinButton();\n        this.playButton = document.getElementById(\"play\");\n        this.playButton.addEventListener(\"click\", ()=>{\n            console.log(this.snd);\n            this.snd.play();\n        });\n    }\n    initPreviousReelObj() {\n        for(let i = 0; i < (0, $9d936a2aecb96285$export$1630b5343357e8b5).SLOT_MACHINE_SIZE; i++)this.previous_reel.push({\n            slotNumber: i,\n            symbolList: []\n        });\n    }\n    createSpinButton() {\n        this.spinButton = document.getElementsByClassName(\"spin-button\")[0];\n        this.spinButton.addEventListener(\"click\", ()=>{\n            this.spinButton.setAttribute(\"class\", \"spin-button spin-button-clicked\");\n            setTimeout(()=>{\n                this.spinButton.setAttribute(\"class\", \"spin-button\");\n            }, (0, $9d936a2aecb96285$export$1630b5343357e8b5).SPIN_BUTTON_DELAY);\n            this.spin();\n        });\n    }\n    createSlotMachine(size) {\n        this.container = document.getElementsByClassName(\"slot-machine\")[0];\n        this.container.innerHTML = \"\";\n        this.reel_animations = [];\n        for(let i = 0; i < size; i++)this.reel_animations.push(this.createReel(i));\n    }\n    createReel(i) {\n        const reel = document.createElement(\"div\");\n        reel.setAttribute(\"class\", \"reel\");\n        reel.setAttribute(\"id\", `slot_${i}`);\n        for(let i = 0; i <= (0, $9d936a2aecb96285$export$1630b5343357e8b5).REEL_SIZE; i++){\n            const randomIndex = Math.floor(Math.random() * (0, $9d936a2aecb96285$export$1630b5343357e8b5).SYMBOL_QTY);\n            const symbolHtml = `\r\n        <div class=\"symbol symbol_${randomIndex}\" id=\"${randomIndex}\"></div>\r\n        `;\n            reel.innerHTML = reel.innerHTML + symbolHtml;\n        }\n        this.previousReelChange(i, reel);\n        this.container.appendChild(reel);\n        return this.createReelAnimation(reel);\n    }\n    previousReelChange(i, reel) {\n        this.previous_reel.forEach((item)=>{\n            if (item.slotNumber === i) {\n                //\n                if (item.symbolList.length === 0) reel.prepend(reel.children.item(reel.children.length - (0, $9d936a2aecb96285$export$1630b5343357e8b5).REEL_OFFSET - 1).cloneNode(true), reel.children.item(reel.children.length - (0, $9d936a2aecb96285$export$1630b5343357e8b5).REEL_OFFSET).cloneNode(true), reel.children.item(reel.children.length - (0, $9d936a2aecb96285$export$1630b5343357e8b5).REEL_OFFSET + 1).cloneNode(true));\n                else reel.prepend(...item.symbolList);\n                //\n                item.symbolList = [];\n                //\n                item.symbolList.push(reel.children.item(reel.children.length - (0, $9d936a2aecb96285$export$1630b5343357e8b5).REEL_OFFSET - 1), reel.children.item(reel.children.length - (0, $9d936a2aecb96285$export$1630b5343357e8b5).REEL_OFFSET), reel.children.item(reel.children.length - (0, $9d936a2aecb96285$export$1630b5343357e8b5).REEL_OFFSET + 1));\n            }\n        });\n    }\n    createReelAnimation(slot) {\n        const symbolHeight = document.getElementsByClassName(\"symbol\")[0].clientHeight;\n        const frame = [\n            {\n                transform: \"translateY(0)\"\n            },\n            {\n                transform: `translateY(-${slot.clientHeight - symbolHeight * 4}px)`\n            }\n        ];\n        const keyframeAnimationOptions = {\n            delay: Math.floor(Math.random() * (0, $9d936a2aecb96285$export$1630b5343357e8b5).ANIMATION_DELAY),\n            duration: (0, $9d936a2aecb96285$export$1630b5343357e8b5).ANIMATION_DURATION,\n            // https://cubic-bezier.com/#.52,.08,.45,1.19\n            easing: \"cubic-bezier(.52,.08,.45,1.19)\",\n            iterations: 1,\n            direction: \"normal\",\n            fill: \"forwards\"\n        };\n        const animation = slot.animate(frame, keyframeAnimationOptions);\n        animation.cancel();\n        animation.onfinish = ()=>{\n            this.finished_reels = this.finished_reels + 1;\n            if (this.finished_reels === (0, $9d936a2aecb96285$export$1630b5343357e8b5).SLOT_MACHINE_SIZE) {\n                this.getResult();\n                this.finished_reels = 0;\n            }\n        };\n        return animation;\n    }\n    spin() {\n        this.createSlotMachine((0, $9d936a2aecb96285$export$1630b5343357e8b5).SLOT_MACHINE_SIZE);\n        this.reel_animations.forEach((animation)=>{\n            animation.play();\n        });\n    }\n    getResult() {\n        this.result = [];\n        for(let i = 0; i < (0, $9d936a2aecb96285$export$1630b5343357e8b5).SLOT_MACHINE_SIZE; i++){\n            const offset = document.getElementById(`slot_${i}`).children.length - (0, $9d936a2aecb96285$export$1630b5343357e8b5).REEL_OFFSET;\n            this.result.push(document.getElementById(`slot_${i}`).children[offset].getAttribute(\"id\"));\n        }\n        console.log(this.result);\n        const result = this.result.reduce((previous, current)=>{\n            if (previous === current) return current;\n            return null;\n        });\n        if (result === null) this.showLost();\n        else this.showWin();\n    }\n    showLost() {\n        console.log(\"Parab\\xe9ns, voc\\xea tomou no c\\xfa!\");\n        console.log(\"-----------------------------------------\");\n    }\n    showWin() {\n        console.log(\"Parab\\xe9ns, voc\\xea ganhou! ...nada\");\n        console.log(\"-----------------------------------------\");\n    }\n}\nconst $b4e14b6b8da86996$var$sm = new $b4e14b6b8da86996$var$SlotMachine();\n\n\n//# sourceMappingURL=index.2b34de73.js.map\n","import \"./style.css\";\r\nimport { CONFIG } from \"./config\";\r\n\r\n// const baseTag = document.getElementsByTagName('base')[0];\r\n// baseTag.setAttribute('href', location.href);\r\n// console.log(baseTag);\r\n// console.log(location);\r\n\r\nlet BASE_URL;\r\n\r\nif (process.env.NODE_ENV !== \"production\") {\r\n    console.log('process.env.NODE_ENV !== \"production\"', process.env.NODE_ENV)\r\n    BASE_URL = CONFIG.BASE_URL_DEV;\r\n} else {\r\n    console.log('process.env.NODE_ENV', process.env.NODE_ENV)\r\n    BASE_URL = CONFIG.BASE_URL_PROD;\r\n}\r\n\r\ninterface Reel {\r\n    slotNumber: number;\r\n    symbolList: Array<any>;\r\n}\r\n\r\nclass SlotMachine {\r\n    // Elements\r\n    public container!: Element;\r\n    public reel_animations: Animation[] = [];\r\n    public spinButton!: Element;\r\n    public previous_reel: Array<Reel> = [];\r\n\r\n    // Status\r\n    public finished_reels: number = 0;\r\n    public result: any[] = [];\r\n\r\n    public snd = new Audio(\r\n        \"./assets/sounds/mixkit-arcade-slot-machine-wheel-1933.wav\"\r\n    );\r\n    public playButton;\r\n\r\n    constructor() {\r\n        this.initPreviousReelObj();\r\n        this.createSlotMachine(CONFIG.SLOT_MACHINE_SIZE);\r\n        this.createSpinButton();\r\n\r\n        this.playButton = document.getElementById(\"play\");\r\n\r\n        this.playButton!.addEventListener(\"click\", () => {\r\n            console.log(this.snd);\r\n            this.snd.play();\r\n        });\r\n\r\n    }\r\n\r\n    initPreviousReelObj() {\r\n        for (let i = 0; i < CONFIG.SLOT_MACHINE_SIZE; i++) {\r\n            this.previous_reel.push({\r\n                slotNumber: i,\r\n                symbolList: [],\r\n            });\r\n        }\r\n    }\r\n\r\n    createSpinButton() {\r\n        this.spinButton = document.getElementsByClassName(\"spin-button\")[0];\r\n        this.spinButton.addEventListener(\"click\", () => {\r\n            this.spinButton.setAttribute(\r\n                \"class\",\r\n                \"spin-button spin-button-clicked\"\r\n            );\r\n\r\n            setTimeout(() => {\r\n                this.spinButton.setAttribute(\"class\", \"spin-button\");\r\n            }, CONFIG.SPIN_BUTTON_DELAY);\r\n\r\n            this.spin();\r\n        });\r\n    }\r\n\r\n    createSlotMachine(size: number) {\r\n        this.container = document.getElementsByClassName(\"slot-machine\")[0];\r\n        this.container.innerHTML = \"\";\r\n\r\n        this.reel_animations = [];\r\n        for (let i = 0; i < size; i++) {\r\n            this.reel_animations.push(this.createReel(i));\r\n        }\r\n    }\r\n\r\n    createReel(i: number): Animation {\r\n        const reel: HTMLDivElement = document.createElement(\"div\");\r\n        reel.setAttribute(\"class\", \"reel\");\r\n        reel.setAttribute(\"id\", `slot_${i}`);\r\n\r\n        for (let i = 0; i <= CONFIG.REEL_SIZE; i++) {\r\n            const randomIndex = Math.floor(Math.random() * CONFIG.SYMBOL_QTY);\r\n            const symbolHtml = `\r\n        <div class=\"symbol symbol_${randomIndex}\" id=\"${randomIndex}\"></div>\r\n        `;\r\n            reel.innerHTML = reel.innerHTML + symbolHtml;\r\n        }\r\n\r\n        this.previousReelChange(i, reel);\r\n        this.container.appendChild(reel);\r\n        return this.createReelAnimation(reel);\r\n    }\r\n\r\n    previousReelChange(i: number, reel: HTMLDivElement) {\r\n        this.previous_reel.forEach((item) => {\r\n            if (item.slotNumber === i) {\r\n                //\r\n                if (item.symbolList.length === 0) {\r\n                    reel.prepend(\r\n                        reel.children\r\n                            .item(\r\n                                reel.children.length - CONFIG.REEL_OFFSET - 1\r\n                            )!\r\n                            .cloneNode(true),\r\n                        reel.children\r\n                            .item(reel.children.length - CONFIG.REEL_OFFSET)!\r\n                            .cloneNode(true),\r\n                        reel.children\r\n                            .item(\r\n                                reel.children.length - CONFIG.REEL_OFFSET + 1\r\n                            )!\r\n                            .cloneNode(true)\r\n                    );\r\n                } else {\r\n                    reel.prepend(...item.symbolList);\r\n                }\r\n                //\r\n                item.symbolList = [];\r\n                //\r\n                item.symbolList.push(\r\n                    reel.children.item(\r\n                        reel.children.length - CONFIG.REEL_OFFSET - 1\r\n                    ),\r\n                    reel.children.item(\r\n                        reel.children.length - CONFIG.REEL_OFFSET\r\n                    ),\r\n                    reel.children.item(\r\n                        reel.children.length - CONFIG.REEL_OFFSET + 1\r\n                    )\r\n                );\r\n            }\r\n        });\r\n    }\r\n\r\n    createReelAnimation(slot: Element): Animation {\r\n        const symbolHeight =\r\n            document.getElementsByClassName(\"symbol\")[0].clientHeight;\r\n\r\n        const frame = [\r\n            { transform: \"translateY(0)\" },\r\n            {\r\n                transform: `translateY(-${\r\n                    slot.clientHeight - symbolHeight * 4\r\n                }px)`,\r\n            },\r\n        ];\r\n\r\n        const keyframeAnimationOptions: KeyframeAnimationOptions = {\r\n            delay: Math.floor(Math.random() * CONFIG.ANIMATION_DELAY),\r\n            duration: CONFIG.ANIMATION_DURATION,\r\n            // https://cubic-bezier.com/#.52,.08,.45,1.19\r\n            easing: \"cubic-bezier(.52,.08,.45,1.19)\",\r\n            iterations: 1,\r\n            direction: \"normal\",\r\n            fill: \"forwards\",\r\n        };\r\n\r\n        const animation: Animation = slot.animate(\r\n            frame,\r\n            keyframeAnimationOptions\r\n        );\r\n        animation.cancel();\r\n        animation.onfinish = () => {\r\n            this.finished_reels = this.finished_reels + 1;\r\n            if (this.finished_reels === CONFIG.SLOT_MACHINE_SIZE) {\r\n                this.getResult();\r\n                this.finished_reels = 0;\r\n            }\r\n        };\r\n\r\n        return animation;\r\n    }\r\n\r\n    spin(): void {\r\n        this.createSlotMachine(CONFIG.SLOT_MACHINE_SIZE);\r\n\r\n        this.reel_animations.forEach((animation: Animation) => {\r\n            animation.play();\r\n        });\r\n    }\r\n\r\n    getResult(): void {\r\n        this.result = [];\r\n\r\n        for (let i = 0; i < CONFIG.SLOT_MACHINE_SIZE; i++) {\r\n            const offset =\r\n                document.getElementById(`slot_${i}`)!.children.length -\r\n                CONFIG.REEL_OFFSET;\r\n\r\n            this.result.push(\r\n                document\r\n                    .getElementById(`slot_${i}`)!\r\n                    .children[offset].getAttribute(\"id\")\r\n            );\r\n        }\r\n\r\n        console.log(this.result);\r\n\r\n        const result = this.result.reduce((previous, current) => {\r\n            if (previous === current) return current;\r\n            return null;\r\n        });\r\n\r\n        if (result === null) {\r\n            this.showLost();\r\n        } else {\r\n            this.showWin();\r\n        }\r\n    }\r\n\r\n    showLost() {\r\n        console.log(\"Parabéns, você tomou no cú!\");\r\n        console.log(\"-----------------------------------------\");\r\n    }\r\n\r\n    showWin() {\r\n        console.log(\"Parabéns, você ganhou! ...nada\");\r\n        console.log(\"-----------------------------------------\");\r\n    }\r\n}\r\n\r\nconst sm = new SlotMachine();\r\n\r\n","export const CONFIG = Object.freeze({\r\n  SLOT_MACHINE_SIZE: 3,\r\n  REEL_SIZE: 60,\r\n  REEL_OFFSET: 3,\r\n  ANIMATION_DELAY: 1000,\r\n  ANIMATION_DURATION: 2000,\r\n  SYMBOL_QTY: 4,\r\n  SPIN_BUTTON_DELAY: 800,\r\n  BASE_URL_DEV: '',\r\n  BASE_URL_PROD: 'https://thiagocolen.github.io/slot-machine',\r\n});\r\n"],"names":["$9d936a2aecb96285$export$1630b5343357e8b5","Object","freeze","SLOT_MACHINE_SIZE","REEL_SIZE","REEL_OFFSET","ANIMATION_DELAY","ANIMATION_DURATION","SYMBOL_QTY","SPIN_BUTTON_DELAY","BASE_URL_DEV","BASE_URL_PROD","console","log","constructor","reel_animations","previous_reel","finished_reels","result","snd","Audio","initPreviousReelObj","createSlotMachine","createSpinButton","playButton","document","getElementById","addEventListener","play","i","push","slotNumber","symbolList","spinButton","getElementsByClassName","setAttribute","setTimeout","spin","size","container","innerHTML","createReel","reel","createElement","randomIndex","Math","floor","random","symbolHtml","previousReelChange","appendChild","createReelAnimation","forEach","item","length","prepend","children","cloneNode","slot","symbolHeight","clientHeight","frame","transform","keyframeAnimationOptions","delay","duration","easing","iterations","direction","fill","animation","animate","cancel","onfinish","getResult","offset","getAttribute","reduce","previous","current","showLost","showWin"],"version":3,"file":"index.2b34de73.js.map"}