{"mappings":"AEAO,MAAM,EAAS,OAAO,OAAO,CAClC,kBAAmB,EACnB,UAAW,GACX,YAAa,EACb,gBAAiB,IACjB,mBAAoB,IACpB,WAAY,EACZ,kBAAmB,GACrB,GAGsB,OAAO,OAAO,CAClC,IAAK,IACL,MAAM,IACN,OAAQ,IACR,KAAM,GACR,GDZA,MAAM,EAAW,GAAK,CAAA,OAAO,cAAgB,OAAO,kBAAA,CAQpD,OAAM,EAKF,YAAY,CAAsB,CAAE,CAChC,IAAI,CAAC,SAAW,EAChB,IAAI,CAAC,SAAW,IAAI,CAAC,SAAS,aAC9B,IAAI,CAAC,SAAS,QAAQ,EAAS,aAC/B,IAAI,CAAC,SAAS,KAAK,MAAQ,KAC3B,IAAI,CAAC,UAAY,IAAI,CAAC,YAC1B,CAEO,YAA2B,CAC9B,IAAM,EAAc,SAAS,iBAAiB,SAExC,EAA0B,EAAE,CAiBlC,OAfA,EAAY,QAAQ,AAAC,IACjB,IAAM,EAAmB,SAAS,cAC9B,CAAC,CAAC,EAAE,EAAM,GAAG,CAAC,EAEZ,EACF,IAAI,CAAC,SAAS,yBAAyB,GAC3C,EAA4B,QAAQ,IAAI,CAAC,UAEzC,EAAU,KAAK,CACX,KAAM,EAAM,GACZ,iBAAkB,EAClB,4BAA6B,CACjC,EACJ,GAEO,CACX,CAEA,MAAa,UAAU,CAAe,CAAgB,CAClD,IAAI,CAAC,UAAU,QAAQ,AAAC,IAChB,EAAM,OAAS,GACf,EAAM,iBAAiB,MAE/B,EACJ,CACJ,CA0RW,IAjRX,MAmBI,aAAc,CAhBP,IAAA,CAAA,gBAA+B,EAAE,CAEjC,IAAA,CAAA,cAA6B,EAAE,CAG/B,IAAA,CAAA,eAAyB,EACzB,IAAA,CAAA,OAAgB,EAAE,CAGlB,IAAA,CAAA,aAAiC,IAAI,EAAiB,GAItD,IAAA,CAAA,MAAgB,EAChB,IAAA,CAAA,SAAmB,GAGtB,IAAI,CAAC,sBACL,IAAI,CAAC,kBAAkB,AAAA,EAAO,mBAC9B,IAAI,CAAC,mBAEL,IAAI,CAAC,WACL,IAAI,CAAC,YAAY,EAErB,CAEA,qBAAsB,CAClB,IAAK,IAAI,EAAI,EAAG,EAAI,AAAA,EAAO,kBAAmB,IAC1C,IAAI,CAAC,cAAc,KAAK,CACpB,WAAY,EACZ,WAAY,EAAE,AAClB,EAER,CAEA,kBAAmB,CACf,IAAI,CAAC,WAAa,SAAS,uBAAuB,cAAc,CAAC,EAAE,CACnE,IAAI,CAAC,WAAW,iBAAiB,QAAS,KACtC,IAAI,CAAC,WAAW,aACZ,QACA,mCAGJ,WAAW,KACP,IAAI,CAAC,WAAW,aAAa,QAAS,cAC1C,EAAG,AAAA,EAAO,mBAEV,IAAI,CAAC,MACT,EACJ,CAEA,kBAAkB,CAAY,CAAE,CAC5B,IAAI,CAAC,UAAY,SAAS,uBAAuB,eAAe,CAAC,EAAE,CACnE,IAAI,CAAC,UAAU,UAAY,GAE3B,IAAI,CAAC,gBAAkB,EAAE,CACzB,IAAK,IAAI,EAAI,EAAG,EAAI,EAAM,IACtB,IAAI,CAAC,gBAAgB,KAAK,IAAI,CAAC,WAAW,GAElD,CAEA,WAAW,CAAS,CAAa,CAC7B,IAAM,EAAuB,SAAS,cAAc,OACpD,EAAK,aAAa,QAAS,QAC3B,EAAK,aAAa,KAAM,CAAC,KAAK,EAAE,EAAE,CAAC,EAEnC,IAAK,IAAI,EAAI,EAAG,GAAK,AAAA,EAAO,UAAW,IAAK,CACxC,IAAM,EAAc,KAAK,MAAM,KAAK,SAAW,AAAA,EAAO,YAChD,EAAa,CAAC,0BAA0B,EAAE,EAAY,MAAM,EAAE,EAAY,QAAQ,CAAC,AACzF,CAAA,EAAK,UAAY,EAAK,UAAY,CACtC,CAIA,OAFA,IAAI,CAAC,mBAAmB,EAAG,GAC3B,IAAI,CAAC,UAAU,YAAY,GACpB,IAAI,CAAC,oBAAoB,EACpC,CAEA,mBAAmB,CAAS,CAAE,CAAoB,CAAE,CAChD,IAAI,CAAC,cAAc,QAAQ,AAAC,IACpB,EAAK,aAAe,IAEhB,AAA2B,IAA3B,EAAK,WAAW,OAChB,EAAK,QACD,EAAK,SACA,KACG,EAAK,SAAS,OAAS,AAAA,EAAO,YAAc,GAE/C,UAAU,CAAA,GACf,EAAK,SACA,KAAK,EAAK,SAAS,OAAS,AAAA,EAAO,aACnC,UAAU,CAAA,GACf,EAAK,SACA,KACG,EAAK,SAAS,OAAS,AAAA,EAAO,YAAc,GAE/C,UAAU,CAAA,IAGnB,EAAK,WAAW,EAAK,YAGzB,EAAK,WAAa,EAAE,CAEpB,EAAK,WAAW,KACZ,EAAK,SAAS,KACV,EAAK,SAAS,OAAS,AAAA,EAAO,YAAc,GAEhD,EAAK,SAAS,KACV,EAAK,SAAS,OAAS,AAAA,EAAO,aAElC,EAAK,SAAS,KACV,EAAK,SAAS,OAAS,AAAA,EAAO,YAAc,IAI5D,EACJ,CAEA,oBAAoB,CAAa,CAAa,CAC1C,IAAM,EACF,SAAS,uBAAuB,SAAS,CAAC,EAAE,CAAC,aAE3C,EAAQ,CACV,CAAE,UAAW,eAAgB,EAC7B,CACI,UAAW,CAAC,YAAY,EACpB,EAAK,aAAe,AAAe,EAAf,EACvB,GAAG,CAAC,AACT,EACH,CAEK,EAAqD,CACvD,MAAO,KAAK,MAAM,KAAK,SAAW,AAAA,EAAO,iBACzC,SAAU,AAAA,EAAO,mBAEjB,OAAQ,iCACR,WAAY,EACZ,UAAW,SACX,KAAM,UACV,EAEM,EAAuB,EAAK,QAC9B,EACA,GAWJ,OATA,EAAU,SACV,EAAU,SAAW,KACjB,IAAI,CAAC,eAAiB,IAAI,CAAC,eAAiB,EACxC,IAAI,CAAC,iBAAmB,AAAA,EAAO,oBAC/B,IAAI,CAAC,YACL,IAAI,CAAC,eAAiB,EAE9B,EAEO,CACX,CAEA,MAAa,CAET,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,UAEvB,IAAI,CAAC,kBAAkB,AAAA,EAAO,mBAE9B,WAAW,KACP,IAAI,CAAC,aAAa,UAAU,cAChC,EAAG,AAAA,EAAO,mBAEV,IAAI,CAAC,gBAAgB,QAAQ,AAAC,IAC1B,EAAU,MACd,EACJ,CAEA,WAAkB,CACd,IAAI,CAAC,OAAS,EAAE,CAEhB,IAAK,IAAI,EAAI,EAAG,EAAI,AAAA,EAAO,kBAAmB,IAAK,CAC/C,IAAM,EACF,SAAS,eAAe,CAAC,KAAK,EAAE,EAAE,CAAC,EAAG,SAAS,OAC/C,AAAA,EAAO,YAEX,IAAI,CAAC,OAAO,KACR,SACK,eAAe,CAAC,KAAK,EAAE,EAAE,CAAC,EAC1B,QAAQ,CAAC,EAAO,CAAC,aAAa,MAE3C,CAEA,IAAI,CAAC,YAAY,IAAI,CAAC,OAC1B,CAEA,YAAY,CAAgB,CAAQ,CAChC,IAAM,EAAe,MAAM,KAAK,IAAI,IAAI,IAIxC,GAFA,QAAQ,IAAI,GAER,AAAwB,IAAxB,EAAa,OACW,MAApB,CAAY,CAAC,EAAE,EACf,IAAI,CAAC,YAAY,KAGG,MAApB,CAAY,CAAC,EAAE,EACf,IAAI,CAAC,YAAY,IAGG,MAApB,CAAY,CAAC,EAAE,EACf,IAAI,CAAC,YAAY,IAGG,MAApB,CAAY,CAAC,EAAE,EACf,IAAI,CAAC,YAAY,SAGlB,GAAI,AAAwB,IAAxB,EAAa,OAAc,CAClC,IAAI,EAAY,EAChB,EAAO,QAAQ,AAAC,IACA,MAAR,GACA,GAER,GAEI,AAAc,IAAd,EACA,IAAI,CAAC,YAAY,GACV,AAAc,IAAd,EACP,IAAI,CAAC,YAAY,GAEjB,IAAI,CAAC,YAAY,EAGzB,KAAO,CACH,IAAI,EAAY,CAAA,EAChB,EAAa,QAAQ,AAAC,IACN,MAAR,GACA,CAAA,EAAY,CAAA,CADhB,CAGJ,GAEI,EACA,IAAI,CAAC,YAAY,GAEjB,IAAI,CAAC,YAAY,EAEzB,CACJ,CAGQ,UAAW,CACf,IAAM,EAAQ,aAAa,QAAQ,qBAE/B,AAAW,QAAX,GACA,aAAa,QAAQ,qBAAsB,OAC3C,IAAI,CAAC,YAEL,IAAI,CAAC,MAAQ,OAAO,EAI5B,CAEQ,YAAY,CAAa,CAAE,CAC/B,IAAI,CAAC,MAAQ,IAAI,CAAC,MAAS,EAAQ,IAAI,CAAC,SACxC,QAAQ,IAAI,SAAU,IAAI,CAAC,MAAO,MAAO,GAEzC,aAAa,QAAQ,qBAAsB,IAAI,CAAC,MAAM,YAEtD,IAAM,EAAwB,SAAS,uBAAuB,QAAQ,CAAC,EAAE,AACzE,CAAA,EAAa,UAAY,CAAC,EAAE,EAAE,IAAI,CAAC,MAAM,WAAW,CAAC,AAEzD,CACJ","sources":["<anon>","src/index.ts","src/config.ts"],"sourcesContent":["\nconst $9d936a2aecb96285$export$1630b5343357e8b5 = Object.freeze({\n    SLOT_MACHINE_SIZE: 3,\n    REEL_SIZE: 60,\n    REEL_OFFSET: 3,\n    ANIMATION_DELAY: 1000,\n    ANIMATION_DURATION: 2000,\n    SYMBOL_QTY: 4,\n    SPIN_BUTTON_DELAY: 800\n});\nconst $9d936a2aecb96285$export$27c95a7104c1f7aa = Object.freeze({\n    BAR: \"0\",\n    SEVEN: \"1\",\n    CHERRY: \"2\",\n    BELL: \"3\"\n});\n\n\n// Create an AudioContext instance\nconst $b4e14b6b8da86996$var$audioCtx = new (window.AudioContext || window.webkitAudioContext)();\nclass $b4e14b6b8da86996$var$SlotAudioMachine {\n    constructor(audioCtx){\n        this.audioCtx = audioCtx;\n        this.gainNode = this.audioCtx.createGain();\n        this.gainNode.connect(audioCtx.destination);\n        this.gainNode.gain.value = 0.125;\n        this.trackList = this.loadTracks();\n    }\n    loadTracks() {\n        const trackIdList = document.querySelectorAll(\"audio\");\n        const trackList = [];\n        trackIdList.forEach((track)=>{\n            const htmlMediaElement = document.querySelector(`#${track.id}`);\n            const mediaElementAudioSourceNode = this.audioCtx.createMediaElementSource(htmlMediaElement);\n            mediaElementAudioSourceNode.connect(this.gainNode);\n            trackList.push({\n                name: track.id,\n                htmlMediaElement: htmlMediaElement,\n                mediaElementAudioSourceNode: mediaElementAudioSourceNode\n            });\n        });\n        return trackList;\n    }\n    async playTrack(trackId) {\n        this.trackList.forEach((track)=>{\n            if (track.name === trackId) track.htmlMediaElement.play();\n        });\n    }\n}\nclass $b4e14b6b8da86996$var$SlotMachine {\n    constructor(){\n        this.reel_animations = [];\n        this.previous_reel = [];\n        // Status\n        this.finished_reels = 0;\n        this.result = [];\n        // Audio FX\n        this.audioMachine = new $b4e14b6b8da86996$var$SlotAudioMachine($b4e14b6b8da86996$var$audioCtx);\n        //\n        this.score = 0;\n        this.betValue = 10;\n        this.initPreviousReelObj();\n        this.createSlotMachine((0, $9d936a2aecb96285$export$1630b5343357e8b5).SLOT_MACHINE_SIZE);\n        this.createSpinButton();\n        this.getScore();\n        this.changeScore(0);\n    }\n    initPreviousReelObj() {\n        for(let i = 0; i < (0, $9d936a2aecb96285$export$1630b5343357e8b5).SLOT_MACHINE_SIZE; i++)this.previous_reel.push({\n            slotNumber: i,\n            symbolList: []\n        });\n    }\n    createSpinButton() {\n        this.spinButton = document.getElementsByClassName(\"spin-button\")[0];\n        this.spinButton.addEventListener(\"click\", ()=>{\n            this.spinButton.setAttribute(\"class\", \"spin-button spin-button-clicked\");\n            setTimeout(()=>{\n                this.spinButton.setAttribute(\"class\", \"spin-button\");\n            }, (0, $9d936a2aecb96285$export$1630b5343357e8b5).SPIN_BUTTON_DELAY);\n            this.spin();\n        });\n    }\n    createSlotMachine(size) {\n        this.container = document.getElementsByClassName(\"slot-machine\")[0];\n        this.container.innerHTML = \"\";\n        this.reel_animations = [];\n        for(let i = 0; i < size; i++)this.reel_animations.push(this.createReel(i));\n    }\n    createReel(i) {\n        const reel = document.createElement(\"div\");\n        reel.setAttribute(\"class\", \"reel\");\n        reel.setAttribute(\"id\", `slot_${i}`);\n        for(let i = 0; i <= (0, $9d936a2aecb96285$export$1630b5343357e8b5).REEL_SIZE; i++){\n            const randomIndex = Math.floor(Math.random() * (0, $9d936a2aecb96285$export$1630b5343357e8b5).SYMBOL_QTY);\n            const symbolHtml = `<div class=\"symbol symbol_${randomIndex}\" id=\"${randomIndex}\"></div>`;\n            reel.innerHTML = reel.innerHTML + symbolHtml;\n        }\n        this.previousReelChange(i, reel);\n        this.container.appendChild(reel);\n        return this.createReelAnimation(reel);\n    }\n    previousReelChange(i, reel) {\n        this.previous_reel.forEach((item)=>{\n            if (item.slotNumber === i) {\n                //\n                if (item.symbolList.length === 0) reel.prepend(reel.children.item(reel.children.length - (0, $9d936a2aecb96285$export$1630b5343357e8b5).REEL_OFFSET - 1).cloneNode(true), reel.children.item(reel.children.length - (0, $9d936a2aecb96285$export$1630b5343357e8b5).REEL_OFFSET).cloneNode(true), reel.children.item(reel.children.length - (0, $9d936a2aecb96285$export$1630b5343357e8b5).REEL_OFFSET + 1).cloneNode(true));\n                else reel.prepend(...item.symbolList);\n                //\n                item.symbolList = [];\n                //\n                item.symbolList.push(reel.children.item(reel.children.length - (0, $9d936a2aecb96285$export$1630b5343357e8b5).REEL_OFFSET - 1), reel.children.item(reel.children.length - (0, $9d936a2aecb96285$export$1630b5343357e8b5).REEL_OFFSET), reel.children.item(reel.children.length - (0, $9d936a2aecb96285$export$1630b5343357e8b5).REEL_OFFSET + 1));\n            }\n        });\n    }\n    createReelAnimation(slot) {\n        const symbolHeight = document.getElementsByClassName(\"symbol\")[0].clientHeight;\n        const frame = [\n            {\n                transform: \"translateY(0)\"\n            },\n            {\n                transform: `translateY(-${slot.clientHeight - symbolHeight * 4}px)`\n            }\n        ];\n        const keyframeAnimationOptions = {\n            delay: Math.floor(Math.random() * (0, $9d936a2aecb96285$export$1630b5343357e8b5).ANIMATION_DELAY),\n            duration: (0, $9d936a2aecb96285$export$1630b5343357e8b5).ANIMATION_DURATION,\n            // https://cubic-bezier.com/#.52,.08,.45,1.19\n            easing: \"cubic-bezier(.52,.08,.45,1.19)\",\n            iterations: 1,\n            direction: \"normal\",\n            fill: \"forwards\"\n        };\n        const animation = slot.animate(frame, keyframeAnimationOptions);\n        animation.cancel();\n        animation.onfinish = ()=>{\n            this.finished_reels = this.finished_reels + 1;\n            if (this.finished_reels === (0, $9d936a2aecb96285$export$1630b5343357e8b5).SLOT_MACHINE_SIZE) {\n                this.getResult();\n                this.finished_reels = 0;\n            }\n        };\n        return animation;\n    }\n    spin() {\n        this.changeScore(-this.betValue);\n        this.createSlotMachine((0, $9d936a2aecb96285$export$1630b5343357e8b5).SLOT_MACHINE_SIZE);\n        setTimeout(()=>{\n            this.audioMachine.playTrack(\"audio_wheel\");\n        }, (0, $9d936a2aecb96285$export$1630b5343357e8b5).SPIN_BUTTON_DELAY);\n        this.reel_animations.forEach((animation)=>{\n            animation.play();\n        });\n    }\n    getResult() {\n        this.result = [];\n        for(let i = 0; i < (0, $9d936a2aecb96285$export$1630b5343357e8b5).SLOT_MACHINE_SIZE; i++){\n            const offset = document.getElementById(`slot_${i}`).children.length - (0, $9d936a2aecb96285$export$1630b5343357e8b5).REEL_OFFSET;\n            this.result.push(document.getElementById(`slot_${i}`).children[offset].getAttribute(\"id\"));\n        }\n        this.checkResult(this.result);\n    }\n    checkResult(result) {\n        const uniqueValues = Array.from(new Set(result));\n        console.log(uniqueValues);\n        if (uniqueValues.length === 1) {\n            if (uniqueValues[0] === \"1\") this.changeScore(1000);\n            if (uniqueValues[0] === \"3\") this.changeScore(80);\n            if (uniqueValues[0] === \"2\") this.changeScore(40);\n            if (uniqueValues[0] === \"0\") this.changeScore(20);\n        } else if (uniqueValues.length === 2) {\n            let cherryQty = 0;\n            result.forEach((val)=>{\n                if (val === \"2\") cherryQty++;\n            });\n            if (cherryQty === 1) this.changeScore(5);\n            else if (cherryQty === 2) this.changeScore(2);\n            else this.changeScore(0);\n        } else {\n            let hasCherry = false;\n            uniqueValues.forEach((val)=>{\n                if (val === \"2\") hasCherry = true;\n            });\n            if (hasCherry) this.changeScore(2);\n            else this.changeScore(0);\n        }\n    }\n    getScore() {\n        const score = localStorage.getItem(\"slot-machine-score\");\n        if (score === null) {\n            localStorage.setItem(\"slot-machine-score\", \"100\");\n            this.getScore();\n        } else this.score = Number(score);\n    }\n    changeScore(times) {\n        this.score = this.score + times * this.betValue;\n        console.log(\"score:\", this.score, \" x:\", times);\n        localStorage.setItem(\"slot-machine-score\", this.score.toString());\n        const scoreDisplay = document.getElementsByClassName(\"score\")[0];\n        scoreDisplay.innerHTML = `$ ${this.score.toString()}`;\n    }\n}\nconst $b4e14b6b8da86996$var$sm = new $b4e14b6b8da86996$var$SlotMachine();\n\n\n//# sourceMappingURL=index.b7b449de.js.map\n","import \"./style.css\";\r\nimport { CONFIG } from \"./config\";\r\n\r\n// Create an AudioContext instance\r\nconst audioCtx = new (window.AudioContext || window.webkitAudioContext)();\r\n\r\ninterface AudioTrack {\r\n    name: string;\r\n    htmlMediaElement: HTMLMediaElement;\r\n    mediaElementAudioSourceNode: MediaElementAudioSourceNode;\r\n}\r\n\r\nclass SlotAudioMachine {\r\n    private audioCtx!: AudioContext;\r\n    private gainNode!: GainNode;\r\n    private trackList!: AudioTrack[];\r\n\r\n    constructor(audioCtx: AudioContext) {\r\n        this.audioCtx = audioCtx;\r\n        this.gainNode = this.audioCtx.createGain();\r\n        this.gainNode.connect(audioCtx.destination);\r\n        this.gainNode.gain.value = 0.125;\r\n        this.trackList = this.loadTracks();\r\n    }\r\n\r\n    public loadTracks(): AudioTrack[] {\r\n        const trackIdList = document.querySelectorAll(\"audio\");\r\n\r\n        const trackList: AudioTrack[] = [];\r\n\r\n        trackIdList.forEach((track) => {\r\n            const htmlMediaElement = document.querySelector(\r\n                `#${track.id}`\r\n            ) as HTMLMediaElement;\r\n            const mediaElementAudioSourceNode =\r\n                this.audioCtx.createMediaElementSource(htmlMediaElement);\r\n            mediaElementAudioSourceNode.connect(this.gainNode);\r\n\r\n            trackList.push({\r\n                name: track.id,\r\n                htmlMediaElement: htmlMediaElement,\r\n                mediaElementAudioSourceNode: mediaElementAudioSourceNode,\r\n            });\r\n        });\r\n\r\n        return trackList;\r\n    }\r\n\r\n    public async playTrack(trackId: string): Promise<any> {\r\n        this.trackList.forEach((track) => {\r\n            if (track.name === trackId) {\r\n                track.htmlMediaElement.play();\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\n// --------------------------------------------------------------\r\n\r\ninterface Reel {\r\n    slotNumber: number;\r\n    symbolList: Array<any>;\r\n}\r\n\r\nclass SlotMachine {\r\n    // Elements\r\n    public container!: Element;\r\n    public reel_animations: Animation[] = [];\r\n    public spinButton!: Element;\r\n    public previous_reel: Array<Reel> = [];\r\n\r\n    // Status\r\n    public finished_reels: number = 0;\r\n    public result: any[] = [];\r\n\r\n    // Audio FX\r\n    public audioMachine: SlotAudioMachine = new SlotAudioMachine(audioCtx);\r\n\r\n\r\n    //\r\n    public score: number = 0;\r\n    public betValue: number = 10;\r\n\r\n    constructor() {\r\n        this.initPreviousReelObj();\r\n        this.createSlotMachine(CONFIG.SLOT_MACHINE_SIZE);\r\n        this.createSpinButton();\r\n\r\n        this.getScore();\r\n        this.changeScore(0);\r\n\r\n    }\r\n\r\n    initPreviousReelObj() {\r\n        for (let i = 0; i < CONFIG.SLOT_MACHINE_SIZE; i++) {\r\n            this.previous_reel.push({\r\n                slotNumber: i,\r\n                symbolList: [],\r\n            });\r\n        }\r\n    }\r\n\r\n    createSpinButton() {\r\n        this.spinButton = document.getElementsByClassName(\"spin-button\")[0];\r\n        this.spinButton.addEventListener(\"click\", () => {\r\n            this.spinButton.setAttribute(\r\n                \"class\",\r\n                \"spin-button spin-button-clicked\"\r\n            );\r\n\r\n            setTimeout(() => {\r\n                this.spinButton.setAttribute(\"class\", \"spin-button\");\r\n            }, CONFIG.SPIN_BUTTON_DELAY);\r\n\r\n            this.spin();\r\n        });\r\n    }\r\n\r\n    createSlotMachine(size: number) {\r\n        this.container = document.getElementsByClassName(\"slot-machine\")[0];\r\n        this.container.innerHTML = \"\";\r\n\r\n        this.reel_animations = [];\r\n        for (let i = 0; i < size; i++) {\r\n            this.reel_animations.push(this.createReel(i));\r\n        }\r\n    }\r\n\r\n    createReel(i: number): Animation {\r\n        const reel: HTMLDivElement = document.createElement(\"div\");\r\n        reel.setAttribute(\"class\", \"reel\");\r\n        reel.setAttribute(\"id\", `slot_${i}`);\r\n\r\n        for (let i = 0; i <= CONFIG.REEL_SIZE; i++) {\r\n            const randomIndex = Math.floor(Math.random() * CONFIG.SYMBOL_QTY);\r\n            const symbolHtml = `<div class=\"symbol symbol_${randomIndex}\" id=\"${randomIndex}\"></div>`;\r\n            reel.innerHTML = reel.innerHTML + symbolHtml;\r\n        }\r\n\r\n        this.previousReelChange(i, reel);\r\n        this.container.appendChild(reel);\r\n        return this.createReelAnimation(reel);\r\n    }\r\n\r\n    previousReelChange(i: number, reel: HTMLDivElement) {\r\n        this.previous_reel.forEach((item) => {\r\n            if (item.slotNumber === i) {\r\n                //\r\n                if (item.symbolList.length === 0) {\r\n                    reel.prepend(\r\n                        reel.children\r\n                            .item(\r\n                                reel.children.length - CONFIG.REEL_OFFSET - 1\r\n                            )!\r\n                            .cloneNode(true),\r\n                        reel.children\r\n                            .item(reel.children.length - CONFIG.REEL_OFFSET)!\r\n                            .cloneNode(true),\r\n                        reel.children\r\n                            .item(\r\n                                reel.children.length - CONFIG.REEL_OFFSET + 1\r\n                            )!\r\n                            .cloneNode(true)\r\n                    );\r\n                } else {\r\n                    reel.prepend(...item.symbolList);\r\n                }\r\n                //\r\n                item.symbolList = [];\r\n                //\r\n                item.symbolList.push(\r\n                    reel.children.item(\r\n                        reel.children.length - CONFIG.REEL_OFFSET - 1\r\n                    ),\r\n                    reel.children.item(\r\n                        reel.children.length - CONFIG.REEL_OFFSET\r\n                    ),\r\n                    reel.children.item(\r\n                        reel.children.length - CONFIG.REEL_OFFSET + 1\r\n                    )\r\n                );\r\n            }\r\n        });\r\n    }\r\n\r\n    createReelAnimation(slot: Element): Animation {\r\n        const symbolHeight =\r\n            document.getElementsByClassName(\"symbol\")[0].clientHeight;\r\n\r\n        const frame = [\r\n            { transform: \"translateY(0)\" },\r\n            {\r\n                transform: `translateY(-${\r\n                    slot.clientHeight - symbolHeight * 4\r\n                }px)`,\r\n            },\r\n        ];\r\n\r\n        const keyframeAnimationOptions: KeyframeAnimationOptions = {\r\n            delay: Math.floor(Math.random() * CONFIG.ANIMATION_DELAY),\r\n            duration: CONFIG.ANIMATION_DURATION,\r\n            // https://cubic-bezier.com/#.52,.08,.45,1.19\r\n            easing: \"cubic-bezier(.52,.08,.45,1.19)\",\r\n            iterations: 1,\r\n            direction: \"normal\",\r\n            fill: \"forwards\",\r\n        };\r\n\r\n        const animation: Animation = slot.animate(\r\n            frame,\r\n            keyframeAnimationOptions\r\n        );\r\n        animation.cancel();\r\n        animation.onfinish = () => {\r\n            this.finished_reels = this.finished_reels + 1;\r\n            if (this.finished_reels === CONFIG.SLOT_MACHINE_SIZE) {\r\n                this.getResult();\r\n                this.finished_reels = 0;\r\n            }\r\n        };\r\n\r\n        return animation;\r\n    }\r\n\r\n    spin(): void {\r\n\r\n        this.changeScore(-this.betValue);\r\n\r\n        this.createSlotMachine(CONFIG.SLOT_MACHINE_SIZE);\r\n\r\n        setTimeout(() => {\r\n            this.audioMachine.playTrack(\"audio_wheel\");\r\n        }, CONFIG.SPIN_BUTTON_DELAY);\r\n\r\n        this.reel_animations.forEach((animation: Animation) => {\r\n            animation.play();\r\n        });\r\n    }\r\n\r\n    getResult(): void {\r\n        this.result = [];\r\n\r\n        for (let i = 0; i < CONFIG.SLOT_MACHINE_SIZE; i++) {\r\n            const offset =\r\n                document.getElementById(`slot_${i}`)!.children.length -\r\n                CONFIG.REEL_OFFSET;\r\n\r\n            this.result.push(\r\n                document\r\n                    .getElementById(`slot_${i}`)!\r\n                    .children[offset].getAttribute(\"id\")\r\n            );\r\n        }\r\n\r\n        this.checkResult(this.result);\r\n    }\r\n\r\n    checkResult(result: string[]): void {\r\n        const uniqueValues = Array.from(new Set(result));\r\n\r\n        console.log(uniqueValues);\r\n\r\n        if (uniqueValues.length === 1) {\r\n            if (uniqueValues[0] === \"1\") {\r\n                this.changeScore(1000);\r\n            }\r\n\r\n            if (uniqueValues[0] === \"3\") {\r\n                this.changeScore(80);\r\n            }\r\n\r\n            if (uniqueValues[0] === \"2\") {\r\n                this.changeScore(40);\r\n            }\r\n\r\n            if (uniqueValues[0] === \"0\") {\r\n                this.changeScore(20);\r\n            }\r\n\r\n        } else if (uniqueValues.length === 2) {\r\n            let cherryQty = 0;\r\n            result.forEach((val) => {\r\n                if (val === '2') {\r\n                    cherryQty++;\r\n                }\r\n            });\r\n\r\n            if (cherryQty === 1) {\r\n                this.changeScore(5);\r\n            } else if (cherryQty === 2) {\r\n                this.changeScore(2);\r\n            } else {\r\n                this.changeScore(0);\r\n            }\r\n\r\n        } else {\r\n            let hasCherry = false;\r\n            uniqueValues.forEach((val) => {\r\n                if (val === \"2\") {\r\n                    hasCherry = true;\r\n                }\r\n            });\r\n\r\n            if (hasCherry) {\r\n                this.changeScore(2);\r\n            } else {\r\n                this.changeScore(0);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    private getScore() {\r\n        const score = localStorage.getItem(\"slot-machine-score\");\r\n\r\n        if (score ===  null) {\r\n            localStorage.setItem(\"slot-machine-score\", '100');\r\n            this.getScore();\r\n        } else {\r\n            this.score = Number(score);\r\n        }\r\n\r\n\r\n    }\r\n\r\n    private changeScore(times: number) {\r\n        this.score = this.score + (times * this.betValue);\r\n        console.log('score:', this.score, ' x:', times);\r\n\r\n        localStorage.setItem(\"slot-machine-score\", this.score.toString());\r\n\r\n        const scoreDisplay: Element = document.getElementsByClassName('score')[0];    \r\n        scoreDisplay.innerHTML = `$ ${this.score.toString()}`;\r\n    \r\n    }\r\n}\r\n\r\nconst sm = new SlotMachine();\r\n","export const CONFIG = Object.freeze({\r\n  SLOT_MACHINE_SIZE: 3,\r\n  REEL_SIZE: 60,\r\n  REEL_OFFSET: 3,\r\n  ANIMATION_DELAY: 1000,\r\n  ANIMATION_DURATION: 2000,\r\n  SYMBOL_QTY: 4,\r\n  SPIN_BUTTON_DELAY: 800,\r\n});\r\n\r\n\r\nexport const SYMBOL = Object.freeze({\r\n  BAR: '0',\r\n  SEVEN:'1',\r\n  CHERRY: '2',\r\n  BELL: '3',\r\n})"],"names":["$9d936a2aecb96285$export$1630b5343357e8b5","Object","freeze","SLOT_MACHINE_SIZE","REEL_SIZE","REEL_OFFSET","ANIMATION_DELAY","ANIMATION_DURATION","SYMBOL_QTY","SPIN_BUTTON_DELAY","BAR","SEVEN","CHERRY","BELL","$b4e14b6b8da86996$var$audioCtx","window","AudioContext","webkitAudioContext","$b4e14b6b8da86996$var$SlotAudioMachine","constructor","audioCtx","gainNode","createGain","connect","destination","gain","value","trackList","loadTracks","trackIdList","document","querySelectorAll","forEach","track","htmlMediaElement","querySelector","id","mediaElementAudioSourceNode","createMediaElementSource","push","name","playTrack","trackId","play","reel_animations","previous_reel","finished_reels","result","audioMachine","score","betValue","initPreviousReelObj","createSlotMachine","createSpinButton","getScore","changeScore","i","slotNumber","symbolList","spinButton","getElementsByClassName","addEventListener","setAttribute","setTimeout","spin","size","container","innerHTML","createReel","reel","createElement","randomIndex","Math","floor","random","symbolHtml","previousReelChange","appendChild","createReelAnimation","item","length","prepend","children","cloneNode","slot","symbolHeight","clientHeight","frame","transform","keyframeAnimationOptions","delay","duration","easing","iterations","direction","fill","animation","animate","cancel","onfinish","getResult","offset","getElementById","getAttribute","checkResult","uniqueValues","Array","from","Set","console","log","cherryQty","val","hasCherry","localStorage","getItem","setItem","Number","times","toString","scoreDisplay"],"version":3,"file":"index.b7b449de.js.map"}